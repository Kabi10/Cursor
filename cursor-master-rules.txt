# Cursor Master Rules for Web Project Builders

## üîÑ Project Type Selection
Choose your project type from the list below to generate specific guidelines:

- [ ] E-commerce Website
- [ ] Business Website
- [ ] Portfolio Website
- [ ] Blog Website
- [ ] News & Media Website
- [ ] Social Media/Community Website
- [ ] Educational Website
- [ ] Entertainment/Streaming Website
- [ ] Landing Page
- [ ] Web Application/SaaS Platform

## ‚ö†Ô∏è MANDATORY PRE-IMPLEMENTATION CHECKLIST ‚ö†Ô∏è
STOP! Before writing ANY code or suggesting ANY changes:

1. üîç SEARCH FIRST (REQUIRED):
   ```bash
   # Document ALL search results below
   grep_search "[feature keyword]" # Search for related functionality
   file_search "[filename pattern]" # Search for similar files
   list_dir "[relevant directory]" # List contents of relevant directories
   ```

2. üìù DOCUMENT FINDINGS (REQUIRED):
   ```markdown
   ## Existing Files Found:
   - [List all relevant files found with full paths]
   - [Include file sizes and last modified dates if relevant]
   
   ## Existing Functionality:
   - [Describe what already exists in detail]
   - [Note any patterns or architectural approaches used]
   
   ## Gaps Identified:
   - [List what's missing or needs enhancement]
   - [Identify technical debt or issues in existing code]
   
   ## Implementation Decision Tree:
   - Is there existing code that serves this purpose? [Yes/No]
   - Can existing code be enhanced to meet requirements? [Yes/No]
   - Is creating new code justified? [Yes/No, with reasoning]
   
   ## Proposed Approach:
   - [ ] Enhance existing code at [file path]
   - [ ] Create new files (requires detailed justification)
   - [ ] Refactor existing code at [file path]
   
   ## Implementation Plan:
   1. [First step with estimated effort]
   2. [Second step with estimated effort]
   3. [Additional steps as needed]
   ```

3. ‚úã WAIT FOR APPROVAL:
   - Present findings to user with clear options
   - Get explicit approval for chosen approach
   - Never proceed with new files if similar functionality exists
   - Document approval in the implementation plan

‚ùå IF YOU SKIP THIS CHECKLIST, YOU ARE VIOLATING THE MOST IMPORTANT RULE ‚ùå

## üìö AI Instructions

As an AI code builder, this document serves as your complete guide for building or extending a Next.js web project. The rules below define HOW you should approach implementation regardless of project type:

1. **Decision Protocol**: Before implementing any feature:
   - First search for existing code and patterns
   - Show clear options with tradeoffs
   - Wait for explicit approval
   - Document your decision-making process

2. **Context Management**:
   - Maintain a mental map of the project architecture
   - Reference existing patterns when suggesting solutions
   - Track technical debt and refactoring opportunities
   - Keep your internal representation of the codebase updated

3. **Implementation Approach**:
   - Follow the pattern recognition guidelines
   - Use established project patterns over introducing new ones
   - Provide "why" explanations along with code
   - Tag all implementation decisions with appropriate decision factors

4. **Uncertainty Protocol**:
   - When encountering ambiguity, present options with pros/cons
   - Explicitly flag incomplete knowledge ("This appears to be ___, but I need more context")
   - Use specified formats for indicating uncertainty levels
   - Provide specific questions to resolve key uncertainties

## üß† Common Pattern Recognition Map

### Universal Code Structure Patterns
- **Server-Component Pattern**: `async function Page/Component({ params }) + await fetch/db` 
- **Client-Interactive Pattern**: `'use client'; useState/useEffect + event handlers`
- **Data-Fetch Pattern**: `getData` functions paired with React Server Components
- **Layout Pattern**: Hierarchical layouts with global elements in parent layouts

### Universal Implementation Patterns
- **Auth Flow Pattern**: Server-side session checking ‚Üí client-side UI states
- **Data Display Pattern**: Skeleton loading ‚Üí data fetch ‚Üí render with error boundaries
- **Form Pattern**: Zod schema ‚Üí form component ‚Üí server action ‚Üí response handling
- **Filter Pattern**: URL-based state ‚Üí server-side filtering ‚Üí paginated results

## üìä Project Progress Dashboard
Overall Progress: 0% Complete
- Setup & Configuration    ‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°   0%
- Core Features           ‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°   0%
- Admin Dashboard         ‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°   0%
- User Features           ‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°   0%
- Advanced Features       ‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°   0%
- Testing & Deployment    ‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°   0%
- Post-Launch             ‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°‚ñ°   0%

## üîß Project Type Specific Rules

<!-- PROJECT TYPE SPECIFIC RULES WILL BE GENERATED HERE BASED ON SELECTION -->

## üìù Instructions

- Record fixes for mistakes or corrections to avoid repetition in the `Lessons` section.
- Organize thoughts and plan steps before starting a task in the `Scratchpad` section.
- Clear old tasks if necessary.
- Use todo markers for progress tracking:
  - `[X]` Completed tasks
  - `[ ]` Pending tasks
- Update Scratchpad after completing subtasks.
- Reflect and plan after milestones for better task management.
- Always refer to Scratchpad before planning the next step.
- ALWAYS CHECK FOR EXISTING FILES BEFORE CREATING NEW ONES TO AVOID DUPLICATES.

## üéì Universal Lessons

### üñ•Ô∏è UI/UX Implementation Patterns
- Use `npx shadcn@latest add [component]` for Shadcn UI components
- Maintain consistent page layouts (p-6 padding, mb-8 header spacing)
- For loading states: create skeleton components, use Suspense, show indicators for async operations
- For forms: handle loading states with local state, disable inputs during submission
- For filters/search: use URL params, implement debouncing, create separate filter components

### üîÑ Next.js Architecture Patterns
- Page props params must be typed as a Promise in Next.js 14+
- Use `const session = await auth()` instead of `getServerSession(authOptions)`
- Mark components using `useRouter` with `'use client'` directive
- Components using `useSearchParams()` must be client components wrapped in Suspense
- When using dynamic imports with `next/dynamic`, set `ssr: false` for client-only components
- For client-side state: extract state display into client components, use dynamic imports with `ssr: false`
- Pass search params as props from server components instead of using `useSearchParams()` directly
- Handle auth properly: use middleware for protection, include callback URLs, use role-based access

### üß™ Testing Implementation Patterns
- Use `jest.resetAllMocks` (without parentheses) in beforeEach blocks when mocking Next.js hooks
- Always use `bcryptjs` instead of `bcrypt` in tests to avoid native dependencies
- When mocking API handlers, use inline functions instead of `.mockImplementation()`
- For dialog components, always provide `aria-describedby` attribute to avoid accessibility warnings
- Use `jest.spyOn` for functions that need to be restored after tests
- Mock Next.js hooks like `useRouter` at the module level with `jest.mock('next/navigation')`
- When mocking `useRouter`, use `jest.mocked(useRouter).mockReturnValue()` instead of casting to `jest.Mock`
- Initialize mocks with default values: `jest.mock('next/navigation', () => ({ useRouter: jest.fn(() => ({ push: jest.fn() })) }))`

### üõ†Ô∏è Process Implementation Requirements
- ALWAYS check for existing implementations before creating new files
- Use grep_search/file_search to look for similar file names and functionality
- Document search process in scratchpad before implementing features
- NEVER skip the pre-implementation checklist to avoid duplicate code
- Implement parallel components when dependencies allow
- Use consistent patterns across similar file types
- Create independent files first to avoid blocking dependencies
- Leverage existing templates and patterns when available
- Document implementation decisions for future reference
- Split implementation from deployment for faster iteration

## üß© Implementation Templates

### Server Component Template
```tsx
export async function PageComponent({ 
  params,
  searchParams 
}: {
  params: { id: string },
  searchParams: { [key: string]: string | string[] | undefined }
}) {
  // Data fetching
  const data = await getData(searchParams);
  
  // Error handling
  if (!data) {
    return <ErrorComponent message="Failed to load data" />;
  }
  
  return (
    <div className="p-6">
      <h1 className="text-2xl font-bold mb-8">Page Title</h1>
      
      {/* Suspense boundary for client components */}
      <Suspense fallback={<LoadingSkeleton />}>
        <ContentComponent data={data} />
      </Suspense>
    </div>
  );
}
```

### Client Component Template
```tsx
'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';

export default function InteractiveComponent({ 
  initialData,
  onDataChange 
}: ComponentProps) {
  // Local state
  const [data, setData] = useState(initialData);
  const router = useRouter();
  
  // Event handlers
  const handleChange = (name: string, value: string) => {
    const newData = { ...data, [name]: value };
    setData(newData);
    
    // Update URL params
    const params = new URLSearchParams();
    Object.entries(newData).forEach(([key, value]) => {
      if (value) params.set(key, value);
    });
    
    router.push(`?${params.toString()}`);
    if (onDataChange) onDataChange(newData);
  };
  
  return (
    <div className="space-y-4">
      {/* UI components */}
    </div>
  );
}
```

### Data Fetching Template
```tsx
// In lib/data.ts
export async function getData(
  filters: Record<string, string | string[] | undefined>
) {
  try {
    const { param1, param2, sort } = filters;
    
    // Build query
    const query = {
      where: {},
      orderBy: {},
      include: { related: true }
    };
    
    if (param1) {
      query.where.param1 = param1.toString();
    }
    
    if (param2) {
      query.where.param2 = param2.toString();
    }
    
    if (sort) {
      const [field, direction] = sort.toString().split('-');
      query.orderBy[field] = direction;
    }
    
    // Execute query (with error handling and timeout)
    const data = await prisma.model.findMany(query);
    return data;
  } catch (error) {
    console.error("Failed to fetch data:", error);
    return null;
  }
}
```

## üõ°Ô∏è Critical Standards

### Technical Quality Standards
| Category | Standards |
|----------|-----------|
| Type Safety | ‚Ä¢ No `any` types<br>‚Ä¢ Explicit return types on functions<br>‚Ä¢ Proper interface definitions |
| Error Handling | ‚Ä¢ Try/catch blocks around async operations<br>‚Ä¢ Graceful fallbacks<br>‚Ä¢ Error logging |
| Performance | ‚Ä¢ Proper component splitting<br>‚Ä¢ Data fetching optimizations<br>‚Ä¢ Bundle size monitoring |
| Security | ‚Ä¢ Input validation<br>‚Ä¢ Authentication checks<br>‚Ä¢ CSRF protection |

### Testing Coverage Requirements
| Component Type | Minimum Coverage | Required Test Types |
|----------------|------------------|---------------------|
| UI Components | 80% | ‚Ä¢ Unit tests<br>‚Ä¢ Snapshot tests |
| Pages | 70% | ‚Ä¢ Loading states<br>‚Ä¢ Error states<br>‚Ä¢ Integration tests |
| API Routes | 90% | ‚Ä¢ Input validation<br>‚Ä¢ Auth checks<br>‚Ä¢ Error handling |
| Utility Functions | 95% | ‚Ä¢ Unit tests<br>‚Ä¢ Edge cases |
| State Management | 85% | ‚Ä¢ State transitions<br>‚Ä¢ Side effects |

### Environment Configuration Standard
```
.env                  # Local development variables (NOT committed)
.env.example          # Template with all required variables (committed)
.env.production       # Production variables template (committed)
```

### Required Environment Variables Map
| Variable | Purpose | Required In |
|----------|---------|-------------|
| `DATABASE_URL` | Database connection string | All environments |
| `NEXTAUTH_SECRET` | Authentication encryption key | All environments |
| `NEXTAUTH_URL` | Base URL for authentication | All environments |
| `NEXT_PUBLIC_APP_URL` | Public-facing application URL | All environments |
| `GOOGLE_CLIENT_ID` | OAuth authentication | If using Google auth |
| `GOOGLE_CLIENT_SECRET` | OAuth authentication | If using Google auth |
| `GITHUB_CLIENT_ID` | OAuth authentication | If using GitHub auth |
| `GITHUB_CLIENT_SECRET` | OAuth authentication | If using GitHub auth |
| `STRIPE_SECRET_KEY` | Payment processing | If using Stripe |
| `STRIPE_WEBHOOK_SECRET` | Payment webhooks | If using Stripe |
| `RESEND_API_KEY` | Email service | If using Resend |
| `UPLOADTHING_SECRET` | File uploads | If using Uploadthing |
| `UPLOADTHING_APP_ID` | File uploads | If using Uploadthing |

## üìä Technical Debt Tracking

### Debt Classification System
| Category | Definition | Resolution Priority |
|----------|------------|---------------------|
| Critical | Breaks functionality or security vulnerability | IMMEDIATE |
| Major | Affects user experience or performance | HIGH |
| Minor | Code quality or maintainability issue | MEDIUM |
| Refactor | Improved implementation possible | LOW |

### Tracking Format
```
## Technical Debt Item
- **Location**: [file path]
- **Category**: [Critical/Major/Minor/Refactor]
- **Description**: [Brief description of the issue]
- **Impact**: [How it affects the system]
- **Resolution Path**: [Steps to fix]
- **Estimated Effort**: [T-shirt size: XS/S/M/L/XL]
```

## üîç Code Quality Metrics

### Performance Budgets
- Page Load: < 3s on 4G
- First Contentful Paint: < 1.5s
- Bundle Size: < 200KB initial JS
- API Response: < 300ms
- Core Web Vitals minimum:
  - LCP: < 2.5s
  - FID: < 100ms
  - CLS: < 0.1

### Code Complexity Limits
- Function complexity: < 15 cognitive complexity
- File size: < 400 lines
- Function length: < 50 lines
- Component props: < 10 props
- Nesting depth: < 4 levels in JSX

## üìã Scratchpad

### PROJECT TYPE SPECIFIC IMPLEMENTATION PLANS WILL BE GENERATED HERE

## üöÄ Project Type Generators

### E-commerce Website Generator
```javascript
function generateEcommerceRules() {
  return `
## üó∫Ô∏è E-commerce Project Architecture Map

\`\`\`
‚îå‚îÄ User Interface Layer ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îå‚îÄ Data Access Layer ‚îÄ‚îê
‚îÇ                                      ‚îÇ      ‚îÇ                     ‚îÇ
‚îÇ  ‚îå‚îÄ Page Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ      ‚îÇ  ‚îå‚îÄ API Routes ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Product Pages              ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - REST API    ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Category Pages             ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Server      ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Checkout Flow              ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ   Actions     ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ                                      ‚îÇ      ‚îÇ                     ‚îÇ
‚îÇ  ‚îå‚îÄ Client Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ      ‚îÇ  ‚îå‚îÄ Database ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Product Filters              ‚îÇ‚óÑ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚ñ∫‚îÇ - Products    ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Cart Components              ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Orders      ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Payment Forms                ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Users       ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ                                      ‚îÇ      ‚îÇ                     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ E-commerce Specific Concerns ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                                                   ‚îÇ
‚îÇ  ‚îå‚îÄ Cart System ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ Payment ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ Catalog ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ  ‚îÇ - Zustand Store   ‚îÇ  ‚îÇ - Stripe/PayPal   ‚îÇ  ‚îÇ - Categories  ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Persistence     ‚îÇ  ‚îÇ - Checkout Flow   ‚îÇ  ‚îÇ - Filters     ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Cart Operations ‚îÇ  ‚îÇ - Order Creation  ‚îÇ  ‚îÇ - Search      ‚îÇ ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îÇ                                                                   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
\`\`\`

## üìã E-commerce Implementation Plan

### Phase 1: E-commerce Setup and Configuration
[ ] 1.1. Initial Setup
    [ ] Create Next.js project with TypeScript
    [ ] Configure ESLint and Prettier
    [ ] Set up project structure with e-commerce folders
    [ ] Initialize Git repository

[ ] 1.2. E-commerce Dependencies Installation
    [ ] Install Shadcn UI for e-commerce components
    [ ] Set up Lucide icons
    [ ] Install e-commerce specific dependencies
        [ ] Add Zod for product/order validation
        [ ] Add Zustand for cart state management
        [ ] Add Stripe/PayPal for payments
        [ ] Add Resend for order emails

[ ] 1.3. E-commerce Data Model Setup
    [ ] Configure database
    [ ] Create Prisma schema for products, categories, orders
    [ ] Set up authentication for customers
    [ ] Create seed data for products and categories

### Phase 2: Core E-commerce Features
[ ] 2.1. Product Catalog
    [ ] Product listing pages with filters and search
    [ ] Product detail pages with image gallery
    [ ] Category navigation
    [ ] Reviews and ratings system

[ ] 2.2. Shopping Cart
    [ ] Create cart store with Zustand
    [ ] Implement cart operations (add/remove/update)
    [ ] Cart persistence across sessions
    [ ] Cart summary and totals calculation

[ ] 2.3. Checkout Process
    [ ] Multi-step checkout flow
    [ ] Address and shipping options
    [ ] Payment integration
    [ ] Order confirmation

### Phase 3: E-commerce Admin Features
[ ] 3.1. Product Management
    [ ] Product CRUD operations
    [ ] Inventory management
    [ ] Product image uploads
    [ ] Product variants and options

[ ] 3.2. Order Management
    [ ] Order listing and details
    [ ] Order status updates
    [ ] Order fulfillment process
    [ ] Returns handling

### Phase 4: E-commerce Advanced Features
[ ] 4.1. Customer Features
    [ ] Customer accounts
    [ ] Order history
    [ ] Wishlist functionality
    [ ] Saved payment methods

[ ] 4.2. Marketing Features
    [ ] Promotions and discounts
    [ ] Product recommendations
    [ ] Email marketing integration
    [ ] Social sharing

## üß† E-commerce Pattern Recognition Map

### E-commerce Feature Patterns
- **Product Display Pattern**: Grid/List views ‚Üí Filters ‚Üí Pagination
- **Cart Pattern**: Add to cart ‚Üí Cart UI ‚Üí Checkout flow
- **Checkout Pattern**: Information ‚Üí Shipping ‚Üí Payment ‚Üí Confirmation
- **Order Pattern**: Create order ‚Üí Process payment ‚Üí Update inventory ‚Üí Send confirmation
- **Admin Pattern**: CRUD interfaces for products/orders/customers with validation
- **Search Pattern**: Query input ‚Üí Filter application ‚Üí Sorted results
`;
}
```

### Business Website Generator
```javascript
function generateBusinessWebsiteRules() {
  return `
## üó∫Ô∏è Business Website Architecture Map

\`\`\`
‚îå‚îÄ Public Pages Layer ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îå‚îÄ Admin Layer ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                      ‚îÇ      ‚îÇ                     ‚îÇ
‚îÇ  ‚îå‚îÄ Page Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ      ‚îÇ  ‚îå‚îÄ Dashboard ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Home/Landing               ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - CMS Admin   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Services/Products          ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Analytics   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - About/Team                 ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Content     ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Contact/Locations          ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ   Management  ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ                                      ‚îÇ      ‚îÇ                     ‚îÇ
‚îÇ  ‚îå‚îÄ Client Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ      ‚îÇ  ‚îå‚îÄ Data Storage ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Testimonial Carousel         ‚îÇ‚óÑ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚ñ∫‚îÇ - Services    ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Contact Forms                ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Team Members‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Service Showcases           ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Testimonials‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ                                      ‚îÇ      ‚îÇ                     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ Business Website Specific Concerns ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                                                     ‚îÇ
‚îÇ  ‚îå‚îÄ Lead Generation ‚îÄ‚îê  ‚îå‚îÄ Content Strategy ‚îÄ‚îÄ‚îê  ‚îå‚îÄ Conversion ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ  ‚îÇ - Contact Forms   ‚îÇ  ‚îÇ - Service Pages     ‚îÇ  ‚îÇ - CTAs        ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - CTA Design      ‚îÇ  ‚îÇ - Case Studies      ‚îÇ  ‚îÇ - Analytics   ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Form Submissions‚îÇ  ‚îÇ - Testimonials      ‚îÇ  ‚îÇ - Tracking    ‚îÇ ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ
‚îÇ                                                                     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
\`\`\`

## üìã Business Website Implementation Plan

### Phase 1: Business Website Setup
[ ] 1.1. Initial Setup
    [ ] Create Next.js project with TypeScript
    [ ] Configure ESLint and Prettier
    [ ] Set up project structure for business site
    [ ] Initialize Git repository

[ ] 1.2. Business Site Dependencies
    [ ] Install Shadcn UI for business components
    [ ] Set up animation libraries (Framer Motion)
    [ ] Install business site specific dependencies
        [ ] Add form handling libraries
        [ ] Add CMS connection if needed
        [ ] Add analytics packages

[ ] 1.3. Content Architecture
    [ ] Design content models (services, team, testimonials)
    [ ] Create data schemas for business content
    [ ] Set up CMS connection or local content storage
    [ ] Create initial content structure

### Phase 2: Core Business Pages
[ ] 2.1. Key Pages
    [ ] Home/landing page with value proposition
    [ ] Services/Products pages with detailed information
    [ ] About/Team pages to build trust
    [ ] Contact page with form and location information

[ ] 2.2. Interactive Elements
    [ ] Contact forms with validation
    [ ] Service filtering or categorization
    [ ] Testimonial showcases
    [ ] Call-to-action components

[ ] 2.3. Navigation and Footer
    [ ] Responsive navigation menu
    [ ] Footer with contact info and sitemap
    [ ] Legal pages (privacy policy, terms)
    [ ] Site search functionality

### Phase 3: Lead Generation Features
[ ] 3.1. Contact System
    [ ] Form submission handling
    [ ] Email notification system
    [ ] Lead tracking
    [ ] CRM integration if needed

[ ] 3.2. Conversion Optimization
    [ ] Strategic CTA placement
    [ ] A/B testing framework for messaging
    [ ] Lead magnet delivery system
    [ ] Analytics implementation

### Phase 4: Content Management
[ ] 4.1. Admin Interface
    [ ] Content management dashboard
    [ ] User management for staff
    [ ] Content preview functionality
    [ ] Publishing workflow

[ ] 4.2. SEO Features
    [ ] SEO metadata management
    [ ] Sitemap generation
    [ ] Structured data implementation
    [ ] Performance optimization

## üß† Business Website Pattern Recognition Map

### Business Website Feature Patterns
- **Value Proposition Pattern**: Hero ‚Üí Benefits ‚Üí Social Proof ‚Üí CTA
- **Service Display Pattern**: Overview ‚Üí Details ‚Üí Testimonials ‚Üí Contact
- **Team Display Pattern**: Leadership ‚Üí Team Members ‚Üí Hiring CTA
- **Contact Pattern**: Form ‚Üí Map ‚Üí Alternative Contact Methods
- **Testimonial Pattern**: Quote ‚Üí Client Info ‚Üí Associated Service
- **CTA Pattern**: Problem Statement ‚Üí Solution ‚Üí Action Button
`;
}
```

### Portfolio Website Generator
```javascript
function generatePortfolioWebsiteRules() {
  return `
## üó∫Ô∏è Portfolio Website Architecture Map

\`\`\`
‚îå‚îÄ Showcase Layer ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îå‚îÄ Admin Layer ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                      ‚îÇ      ‚îÇ                     ‚îÇ
‚îÇ  ‚îå‚îÄ Page Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ      ‚îÇ  ‚îå‚îÄ Dashboard ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Home/Introduction          ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Portfolio    ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Project Showcase           ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ   Management   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - About/Skills               ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Analytics    ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Contact                    ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Content      ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ      ‚îÇ  ‚îÇ   Updates     ‚îÇ  ‚îÇ
‚îÇ                                      ‚îÇ      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ  ‚îå‚îÄ Client Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ      ‚îÇ                     ‚îÇ
‚îÇ  ‚îÇ - Project Gallery             ‚îÇ‚óÑ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚ñ∫‚îå‚îÄ Data Storage ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Skills Visualization        ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Projects    ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Contact Form                ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Skills      ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Animation Effects           ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Testimonials‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ                                      ‚îÇ      ‚îÇ                     ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ Portfolio Specific Concerns ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                                                   ‚îÇ
‚îÇ  ‚îå‚îÄ Visual Impact ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ Project Showcase ‚îÄ‚îê  ‚îå‚îÄ Personal ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ  ‚îÇ - Animations      ‚îÇ  ‚îÇ - Case Studies     ‚îÇ  ‚îÇ - Bio        ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Image Gallery   ‚îÇ  ‚îÇ - Project Details  ‚îÇ  ‚îÇ - Skills     ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Typography      ‚îÇ  ‚îÇ - Results/Metrics  ‚îÇ  ‚îÇ - Resume     ‚îÇ ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îÇ                                                                   ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
\`\`\`

## üìã Portfolio Website Implementation Plan

### Phase 1: Portfolio Setup
[ ] 1.1. Initial Setup
    [ ] Create Next.js project with TypeScript
    [ ] Configure ESLint and Prettier
    [ ] Set up project structure for portfolio
    [ ] Initialize Git repository

[ ] 1.2. Portfolio Dependencies
    [ ] Install Shadcn UI for portfolio components
    [ ] Set up animation libraries (Framer Motion)
    [ ] Install portfolio specific dependencies
        [ ] Add image gallery components
        [ ] Add motion/animation libraries
        [ ] Add form handling for contact

[ ] 1.3. Content Structure
    [ ] Design projects data model
    [ ] Create skills and experience schema
    [ ] Set up personal information storage
    [ ] Create initial content structure

### Phase 2: Core Portfolio Pages
[ ] 2.1. Home and Introduction
    [ ] Hero section with personal brand
    [ ] Featured projects section
    [ ] Skills overview
    [ ] Brief introduction

[ ] 2.2. Projects Showcase
    [ ] Projects listing/grid
    [ ] Project detail pages
    [ ] Case study templates
    [ ] Filterable project categories

[ ] 2.3. About and Contact
    [ ] Personal bio and history
    [ ] Skills visualization
    [ ] Experience timeline
    [ ] Contact form with validation

### Phase 3: Visual Enhancements
[ ] 3.1. Animation and Interactivity
    [ ] Scroll animations
    [ ] Interactive elements
    [ ] Page transitions
    [ ] Loading animations

[ ] 3.2. Media Optimization
    [ ] Image galleries
    [ ] Video integration
    [ ] Responsive media handling
    [ ] Lazy loading implementation

### Phase 4: Portfolio Management
[ ] 4.1. Project Management
    [ ] Admin interface for projects
    [ ] Content editing capabilities
    [ ] Image upload and management
    [ ] Draft and publishing workflow

[ ] 4.2. Experience Features
    [ ] Resume download option
    [ ] Testimonials section
    [ ] Contact form with email notification
    [ ] Social media integration

## üß† Portfolio Website Pattern Recognition Map

### Portfolio Feature Patterns
- **Introduction Pattern**: Visual Impact ‚Üí Personal Brand ‚Üí Key Skills ‚Üí CTA
- **Project Display Pattern**: Thumbnail ‚Üí Brief ‚Üí Technologies ‚Üí Details Link
- **Project Detail Pattern**: Overview ‚Üí Problem ‚Üí Solution ‚Üí Results ‚Üí Next Project
- **Skills Pattern**: Categories ‚Üí Visualization ‚Üí Experience Level ‚Üí Examples
- **Contact Pattern**: Brief Message ‚Üí Form ‚Üí Alternative Contact Methods
- **Personal Brand Pattern**: Consistent Typography ‚Üí Color Scheme ‚Üí Visual Style
`;
}
```

### Blog Website Generator
```javascript
function generateBlogWebsiteRules() {
  return `
## üó∫Ô∏è Blog Website Architecture Map

\`\`\`
‚îå‚îÄ Public Pages Layer ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îå‚îÄ Admin Layer ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                      ‚îÇ      ‚îÇ                     ‚îÇ
‚îÇ  ‚îå‚îÄ Page Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ      ‚îÇ  ‚îå‚îÄ Dashboard ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Homepage                    ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Content     ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Article Pages               ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ   Management  ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Category Archives           ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Analytics   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Author Pages                ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Comments    ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ      ‚îÇ  ‚îÇ   Moderation  ‚îÇ  ‚îÇ
‚îÇ                                      ‚îÇ      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ  ‚îå‚îÄ Client Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ      ‚îÇ                     ‚îÇ
‚îÇ  ‚îÇ - Comment System               ‚îÇ‚óÑ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚ñ∫‚îå‚îÄ Data Storage ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Newsletter Signup           ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Articles    ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Search Interface            ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Categories  ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Social Sharing              ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Comments    ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ      ‚îÇ  ‚îÇ - Users       ‚îÇ  ‚îÇ
‚îÇ                                      ‚îÇ      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

## üó∫Ô∏è Blog Specific Concerns ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                                                       ‚îÇ
‚îÇ  ‚îå‚îÄ Content Management ‚îê  ‚îå‚îÄ Reader Engagement ‚îÄ‚îê  ‚îå‚îÄ Monetization ‚îê ‚îÇ
‚îÇ  ‚îÇ - Post Creation     ‚îÇ  ‚îÇ - Comments System   ‚îÇ  ‚îÇ - Ads         ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Categories/Tags   ‚îÇ  ‚îÇ - Newsletter        ‚îÇ  ‚îÇ - Memberships ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Media Library     ‚îÇ  ‚îÇ - Social Sharing    ‚îÇ  ‚îÇ - Affiliates  ‚îÇ ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îÇ                                                                       ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
```

## üìã Blog Website Implementation Plan

### Phase 1: Blog Setup
[ ] 1.1. Initial Setup
    [ ] Create Next.js project with TypeScript
    [ ] Configure ESLint and Prettier
    [ ] Set up project structure for blog
    [ ] Initialize Git repository

[ ] 1.2. Blog Dependencies
    [ ] Install Shadcn UI for blog components
    [ ] Set up MDX or content management system
    [ ] Install blog specific dependencies
        [ ] Add markdown processing libraries
        [ ] Add syntax highlighting for code blocks
        [ ] Add comment system components

[ ] 1.3. Content Structure
    [ ] Design blog post data model
    [ ] Create category and tag schema
    [ ] Set up author profiles structure
    [ ] Create initial content organization

### Phase 2: Core Blog Pages
[ ] 2.1. Home and Archives
    [ ] Blog homepage with featured posts
    [ ] Category and tag archive pages
    [ ] Author profile pages
    [ ] Search results page

[ ] 2.2. Article Pages
    [ ] Article template with metadata
    [ ] Related posts section
    [ ] Comment section
    [ ] Social sharing functionality

[ ] 2.3. Navigation and Discovery
    [ ] Category navigation
    [ ] Tag cloud component
    [ ] Featured and popular posts
    [ ] Search functionality

### Phase 3: Reader Engagement
[ ] 3.1. Comments System
    [ ] Comment submission and display
    [ ] Nested replies functionality
    [ ] Comment moderation dashboard
    [ ] User authentication for comments

[ ] 3.2. Subscription Features
    [ ] Newsletter signup form
    [ ] Subscription management
    [ ] Email notification system
    [ ] Membership features (if applicable)

### Phase 4: Content Management
[ ] 4.1. Admin Dashboard
    [ ] Content creation interface
    [ ] Editorial workflow
    [ ] Media management
    [ ] Analytics dashboard

[ ] 4.2. SEO and Distribution
    [ ] SEO metadata management
    [ ] RSS feed generation
    [ ] Social media integration
    [ ] Structured data implementation

## üß† Blog Website Pattern Recognition Map

### Blog Feature Patterns
- **Article Display Pattern**: Header ‚Üí Content ‚Üí Author Bio ‚Üí Related Posts
- **Category Pattern**: Title ‚Üí Description ‚Üí Featured Post ‚Üí Post Grid
- **Comment Pattern**: Comment Form ‚Üí Thread ‚Üí Nested Replies ‚Üí Moderation
- **Archive Pattern**: Filter Controls ‚Üí Chronological Posts ‚Üí Pagination
- **Author Pattern**: Bio ‚Üí Featured Work ‚Üí Contact Info ‚Üí Article List
- **Search Pattern**: Query Input ‚Üí Filter Options ‚Üí Sorted Results ‚Üí Refinement

### News & Media Website Generator
```javascript
function generateNewsWebsiteRules() {
  return `
## üó∫Ô∏è News & Media Website Architecture Map

\`\`\`
‚îå‚îÄ Public Pages Layer ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îå‚îÄ Admin & Publishing Layer ‚îÄ‚îê
‚îÇ                                      ‚îÇ      ‚îÇ                            ‚îÇ
‚îÇ  ‚îå‚îÄ Page Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ      ‚îÇ  ‚îå‚îÄ Dashboard ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Homepage/Sections          ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Editorial Workflow  ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Article Pages              ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Content Management  ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Topic/Category Pages       ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - User Management     ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Live Updates/Breaking      ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Analytics           ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ                                      ‚îÇ      ‚îÇ                            ‚îÇ
‚îÇ  ‚îå‚îÄ Client Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ      ‚îÇ  ‚îå‚îÄ Data Storage ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Live Updates Feed           ‚îÇ‚óÑ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚ñ∫‚îÇ - Articles             ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Comment System              ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Categories/Topics    ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Media Galleries             ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Authors/Contributors ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Subscription Modules        ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Multimedia Assets    ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ                                      ‚îÇ      ‚îÇ                            ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ News & Media Specific Concerns ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                                                          ‚îÇ
‚îÇ  ‚îå‚îÄ Editorial Management ‚îê  ‚îå‚îÄ Reader Engagement ‚îÄ‚îê  ‚îå‚îÄ Monetization ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ  ‚îÇ - Breaking News       ‚îÇ  ‚îÇ - Comments System   ‚îÇ  ‚îÇ - Subscriptions ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Topic Organization  ‚îÇ  ‚îÇ - Newsletter        ‚îÇ  ‚îÇ - Advertising   ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Multimedia Content  ‚îÇ  ‚îÇ - Social Sharing    ‚îÇ  ‚îÇ - Premium       ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Fact Checking       ‚îÇ  ‚îÇ - User Accounts     ‚îÇ  ‚îÇ   Content       ‚îÇ ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îÇ                                                                          ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
\`\`\`

## üìã News & Media Website Implementation Plan

### Phase 1: News Platform Setup
[ ] 1.1. Initial Setup
    [ ] Create Next.js project with TypeScript
    [ ] Configure ESLint and Prettier
    [ ] Set up project structure for news platform
    [ ] Initialize Git repository

[ ] 1.2. News Platform Dependencies
    [ ] Install Shadcn UI for news components
    [ ] Set up content management system
    [ ] Install news platform specific dependencies
        [ ] Add real-time update libraries
        [ ] Add media processing tools
        [ ] Add paywall/subscription components if needed

[ ] 1.3. Content Structure
    [ ] Design article data model with metadata
    [ ] Create topics/categories taxonomy
    [ ] Set up author/contributor profiles
    [ ] Create multimedia asset management

### Phase 2: Core News Pages
[ ] 2.1. Homepage and Sections
    [ ] News homepage with featured stories
    [ ] Section/category landing pages
    [ ] Breaking news alerts component
    [ ] Trending stories module

[ ] 2.2. Article Pages
    [ ] Article template with rich media support
    [ ] Related stories section
    [ ] Author byline and information
    [ ] Social sharing and engagement tools

[ ] 2.3. Discovery and Navigation
    [ ] Advanced search functionality
    [ ] Topic/category navigation
    [ ] Most read/trending navigation
    [ ] Archive access and date-based navigation

### Phase 3: Audience Engagement
[ ] 3.1. User Interaction
    [ ] Comment system with moderation
    [ ] Newsletter and alert signup
    [ ] Social sharing optimization
    [ ] User account management

[ ] 3.2. Subscription Features
    [ ] Metered paywall implementation
    [ ] Subscription management
    [ ] Premium content designation
    [ ] Member-only features

### Phase 4: Publishing Workflow
[ ] 4.1. Editorial System
    [ ] Content creation interface
    [ ] Editorial review workflow
    [ ] Scheduled publishing
    [ ] Breaking news fast-track

[ ] 4.2. Analytics and Optimization
    [ ] Reader analytics dashboard
    [ ] Content performance metrics
    [ ] A/B testing framework
    [ ] SEO optimization tools

## üß† News & Media Pattern Recognition Map

### News Feature Patterns
- **Homepage Pattern**: Breaking News ‚Üí Featured Stories ‚Üí Section Blocks ‚Üí Trending
- **Article Pattern**: Headline ‚Üí Summary ‚Üí Content ‚Üí Related Stories
- **Section Pattern**: Section Header ‚Üí Featured ‚Üí Latest News ‚Üí Archive Link
- **Breaking News Pattern**: Alert Banner ‚Üí Breaking Label ‚Üí Timestamp ‚Üí Update Frequency
- **Media Pattern**: Gallery ‚Üí Caption ‚Üí Credit ‚Üí Related Story
- **Topic Pattern**: Topic Header ‚Üí Definition ‚Üí Related Stories ‚Üí Expert Voices
```

### Social Media/Community Website Generator
```javascript
function generateSocialMediaWebsiteRules() {
  return `
## üó∫Ô∏è Social Media/Community Website Architecture Map

\`\`\`
‚îå‚îÄ User Interface Layer ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê       ‚îå‚îÄ Backend Layer ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                     ‚îÇ       ‚îÇ                        ‚îÇ
‚îÇ  ‚îå‚îÄ Page Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ       ‚îÇ  ‚îå‚îÄ API Routes ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Feed/Timeline             ‚îÇ   ‚îÇ       ‚îÇ  ‚îÇ - Auth API        ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Profile Pages             ‚îÇ   ‚îÇ       ‚îÇ  ‚îÇ - Content API     ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Groups/Communities        ‚îÇ   ‚îÇ       ‚îÇ  ‚îÇ - Social API      ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Notifications             ‚îÇ   ‚îÇ       ‚îÇ  ‚îÇ - Analytics API   ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ       ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ                                     ‚îÇ       ‚îÇ                        ‚îÇ
‚îÇ  ‚îå‚îÄ Client Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ       ‚îÇ  ‚îå‚îÄ Data Storage ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Post Creator               ‚îÇ‚óÑ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚ñ∫‚îÇ - User Profiles   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Comment Threads            ‚îÇ  ‚îÇ       ‚îÇ  ‚îÇ - Posts/Content   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Real-time Updates          ‚îÇ  ‚îÇ       ‚îÇ  ‚îÇ - Interactions    ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Message Components         ‚îÇ  ‚îÇ       ‚îÇ  ‚îÇ - Media Assets    ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ       ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ                                     ‚îÇ       ‚îÇ                        ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò       ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ Social Media Specific Concerns ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                                                      ‚îÇ
‚îÇ  ‚îå‚îÄ User Interactions ‚îÄ‚îê  ‚îå‚îÄ Content Management ‚îê  ‚îå‚îÄ Community ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ  ‚îÇ - Likes/Reactions   ‚îÇ  ‚îÇ - Post Creation     ‚îÇ  ‚îÇ - Media Uploads ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Comments          ‚îÇ  ‚îÇ - Media Uploads     ‚îÇ  ‚îÇ - Moderation    ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Sharing           ‚îÇ  ‚îÇ - Content Discovery ‚îÇ  ‚îÇ - Reporting     ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Following         ‚îÇ  ‚îÇ - Feed Algorithms   ‚îÇ  ‚îÇ - Governance    ‚îÇ ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îÇ                                                                      ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
\`\`\`

## üìã Social Media/Community Website Implementation Plan

### Phase 1: Platform Setup
[ ] 1.1. Initial Setup
    [ ] Create Next.js project with TypeScript
    [ ] Configure ESLint and Prettier
    [ ] Set up project structure for social platform
    [ ] Initialize Git repository

[ ] 1.2. Social Platform Dependencies
    [ ] Install Shadcn UI for social components
    [ ] Set up real-time functionalities
    [ ] Install platform specific dependencies
        [ ] Add WebSocket libraries
        [ ] Add media processing tools
        [ ] Add authentication solutions

[ ] 1.3. Data Models
    [ ] Design user profile model
    [ ] Create post/content schema
    [ ] Set up interaction data models
    [ ] Define community/group structures

### Phase 2: Core Social Features
[ ] 2.1. User Authentication
    [ ] User registration and login
    [ ] Profile creation and customization
    [ ] Follow/connection system
    [ ] User discovery

[ ] 2.2. Content Creation
    [ ] Post creation interface
    [ ] Media upload and processing
    [ ] Rich text formatting
    [ ] Tagging and mentions

[ ] 2.3. Feed and Timeline
    [ ] Content feed algorithms
    [ ] Real-time updates
    [ ] Infinite scrolling
    [ ] Content filtering

### Phase 3: Interaction Features
[ ] 3.1. Social Interactions
    [ ] Likes/reactions system
    [ ] Comment threads with nesting
    [ ] Content sharing mechanisms
    [ ] Notification system

[ ] 3.2. Messaging
    [ ] Direct messaging interface
    [ ] Group conversations
    [ ] Media sharing in messages
    [ ] Read receipts and typing indicators

### Phase 4: Community Management
[ ] 4.1. Groups and Communities
    [ ] Group creation and management
    [ ] Member roles and permissions
    [ ] Group content creation
    [ ] Group discovery

[ ] 4.2. Moderation Tools
    [ ] Content moderation queue
    [ ] Reporting system
    [ ] User sanctions
    [ ] Community guidelines enforcement

## üß† Social Media/Community Pattern Recognition Map

### Social Feature Patterns
- **Feed Pattern**: Algorithm ‚Üí Content Cards ‚Üí Interaction Controls ‚Üí Load More
- **Profile Pattern**: Header ‚Üí Bio ‚Üí Activity Feed ‚Üí Connection Controls
- **Post Pattern**: Author ‚Üí Content ‚Üí Media ‚Üí Interactions ‚Üí Comments
- **Comment Pattern**: Nested Threading ‚Üí Reactions ‚Üí Reply Controls ‚Üí Moderation
- **Group Pattern**: Header ‚Üí Description ‚Üí Member List ‚Üí Content Feed
- **Notification Pattern**: Activity Type ‚Üí Actor ‚Üí Object ‚Üí Timestamp ‚Üí Action
```

### Educational Website Generator
```javascript
function generateEducationalWebsiteRules() {
  return `
## üó∫Ô∏è Educational Website Architecture Map

\`\`\`
‚îå‚îÄ Learning Interface Layer ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îå‚îÄ Admin & Content Layer ‚îÄ‚îÄ‚îê
‚îÇ                                      ‚îÇ      ‚îÇ                          ‚îÇ
‚îÇ  ‚îå‚îÄ Page Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ      ‚îÇ  ‚îå‚îÄ Dashboard ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Course Catalog             ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Content Creation  ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Lesson Pages               ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Student Management‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Quiz/Assessment Pages      ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Progress Tracking ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Discussion Forums          ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Analytics         ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ                                      ‚îÇ      ‚îÇ                          ‚îÇ
‚îÇ  ‚îå‚îÄ Client Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ      ‚îÇ  ‚îå‚îÄ Data Storage ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Interactive Exercises       ‚îÇ‚óÑ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚ñ∫‚îÇ - Courses/Lessons    ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Progress Tracking           ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - User Profiles      ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Quiz Components             ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Assessments        ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Media Players               ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Learning Materials ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ                                      ‚îÇ      ‚îÇ                          ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ Educational Specific Concerns ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                                                         ‚îÇ
‚îÇ  ‚îå‚îÄ Learning Path ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ Assessment ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ Community ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ  ‚îÇ - Course Structure  ‚îÇ  ‚îÇ - Quizzes            ‚îÇ  ‚îÇ - Forums        ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Progress Tracking ‚îÇ  ‚îÇ - Assignments        ‚îÇ  ‚îÇ - Study Groups  ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Prerequisites     ‚îÇ  ‚îÇ - Certifications     ‚îÇ  ‚îÇ - Peer Review   ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Learning Outcomes ‚îÇ  ‚îÇ - Grading            ‚îÇ  ‚îÇ - Mentorship    ‚îÇ ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îÇ                                                                         ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
\`\`\`

## üìã Educational Website Implementation Plan

### Phase 1: Learning Platform Setup
[ ] 1.1. Initial Setup
    [ ] Create Next.js project with TypeScript
    [ ] Configure ESLint and Prettier
    [ ] Set up project structure for learning platform
    [ ] Initialize Git repository

[ ] 1.2. Educational Platform Dependencies
    [ ] Install Shadcn UI for educational components
    [ ] Set up content management system
    [ ] Install platform specific dependencies
        [ ] Add interactive exercise libraries
        [ ] Add video player components
        [ ] Add quiz/assessment tools

[ ] 1.3. Content Structure
    [ ] Design course and lesson data models
    [ ] Create assessment and quiz schemas
    [ ] Set up user profile and progress tracking
    [ ] Define learning path structures

### Phase 2: Core Learning Features
[ ] 2.1. Course Management
    [ ] Course catalog with filtering
    [ ] Course enrollment system
    [ ] Lesson sequencing
    [ ] Learning path visualization

[ ] 2.2. Content Delivery
    [ ] Lesson page templates
    [ ] Rich media integration
    [ ] Interactive elements
    [ ] Resource downloads

[ ] 2.3. Assessment System
    [ ] Quiz creation and delivery
    [ ] Assignment submission
    [ ] Automated grading
    [ ] Progress tracking

### Phase 3: User Engagement
[ ] 3.1. Learning Community
    [ ] Discussion forums
    [ ] Q&A sections
    [ ] Study groups
    [ ] Peer feedback system

[ ] 3.2. Student Experience
    [ ] Dashboard with progress
    [ ] Bookmarking and notes
    [ ] Certification system
    [ ] Personalized recommendations

### Phase 4: Administration
[ ] 4.1. Instructor Tools
    [ ] Course creation interface
    [ ] Student management
    [ ] Grading dashboard
    [ ] Announcements system

[ ] 4.2. Analytics
    [ ] Student progress analytics
    [ ] Content effectiveness metrics
    [ ] Engagement reporting
    [ ] Assessment statistics

## üß† Educational Website Pattern Recognition Map

### Educational Feature Patterns
- **Course Display Pattern**: Overview ‚Üí Syllabus ‚Üí Instructors ‚Üí Enrollment
- **Lesson Pattern**: Objectives ‚Üí Content ‚Üí Interactive Elements ‚Üí Assessment
- **Assessment Pattern**: Instructions ‚Üí Questions ‚Üí Submission ‚Üí Feedback
- **Learning Path Pattern**: Prerequisites ‚Üí Core Content ‚Üí Assessments ‚Üí Certification
- **Discussion Pattern**: Topic ‚Üí Threaded Replies ‚Üí Instructor Input ‚Üí Resolution
- **Progress Pattern**: Visual Tracker ‚Üí Completion Status ‚Üí Next Steps ‚Üí Achievements
```

### Entertainment/Streaming Website Generator
```javascript
function generateEntertainmentWebsiteRules() {
  return `
## üó∫Ô∏è Entertainment/Streaming Website Architecture Map

\`\`\`
‚îå‚îÄ User Interface Layer ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îå‚îÄ Content Management Layer ‚îê
‚îÇ                                     ‚îÇ      ‚îÇ                           ‚îÇ
‚îÇ  ‚îå‚îÄ Page Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ      ‚îÇ  ‚îå‚îÄ Admin Dashboard ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Home/Browse Pages         ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Content Upload     ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Media Player Pages        ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Catalog Management ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Category/Genre Pages      ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - User Management    ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - User Profile Pages        ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Analytics          ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ                                     ‚îÇ      ‚îÇ                           ‚îÇ
‚îÇ  ‚îå‚îÄ Client Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ      ‚îÇ  ‚îå‚îÄ Data Storage ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Media Player               ‚îÇ‚óÑ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚ñ∫‚îÇ - Media Catalog       ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Recommendation Carousels   ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - User Profiles       ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Search Interface           ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Viewing History     ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Watchlist Components       ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Recommendations     ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ                                     ‚îÇ      ‚îÇ                           ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ Entertainment Specific Concerns ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                                                          ‚îÇ
‚îÇ  ‚îå‚îÄ Media Delivery ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ User Experience ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ Monetization ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ  ‚îÇ - Streaming Quality  ‚îÇ  ‚îÇ - Recommendations   ‚îÇ  ‚îÇ - Subscriptions  ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Adaptive Bitrate   ‚îÇ  ‚îÇ - Watchlist/History ‚îÇ  ‚îÇ - Advertising   ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - DRM Protection     ‚îÇ  ‚îÇ - Ratings/Reviews   ‚îÇ  ‚îÇ - Tiered Access ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Multi-device       ‚îÇ  ‚îÇ - Personalization   ‚îÇ  ‚îÇ - Pay-per-view  ‚îÇ ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îÇ                                                                          ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
\`\`\`

## üìã Entertainment/Streaming Website Implementation Plan

### Phase 1: Streaming Platform Setup
[ ] 1.1. Initial Setup
    [ ] Create Next.js project with TypeScript
    [ ] Configure ESLint and Prettier
    [ ] Set up project structure for streaming platform
    [ ] Initialize Git repository

[ ] 1.2. Streaming Platform Dependencies
    [ ] Install Shadcn UI for streaming components
    [ ] Set up media player and streaming libraries
    [ ] Install platform specific dependencies
        [ ] Add video.js or similar player
        [ ] Add content protection tools
        [ ] Add recommendation engine

[ ] 1.3. Content Structure
    [ ] Design media catalog data model
    [ ] Create genre/category taxonomy
    [ ] Set up user profile and preferences
    [ ] Define content metadata schema

### Phase 2: Core Streaming Features
[ ] 2.1. Content Browsing
    [ ] Homepage with featured content
    [ ] Genre/category browsing
    [ ] Search functionality
    [ ] Filtering and sorting

[ ] 2.2. Media Player
    [ ] Video player implementation
    [ ] Quality selection
    [ ] Playback controls
    [ ] Continue watching functionality

[ ] 2.3. User Features
    [ ] User registration and profiles
    [ ] Watchlist management
    [ ] Viewing history
    [ ] Ratings and reviews

### Phase 3: User Experience
[ ] 3.1. Personalization
    [ ] Recommendation algorithm
    [ ] Personalized homepage
    [ ] Content carousels
    [ ] "Because you watched" suggestions

[ ] 3.2. Multi-device Experience
    [ ] Responsive design
    [ ] Playback position syncing
    [ ] Device management
    [ ] Download for offline viewing

### Phase 4: Platform Management
[ ] 4.1. Content Management
    [ ] Media upload and processing
    [ ] Metadata management
    [ ] Content scheduling
    [ ] Featured content curation

[ ] 4.2. Business Features
    [ ] Subscription management
    [ ] Payment processing
    [ ] Analytics dashboard
    [ ] Content performance metrics

## üß† Entertainment/Streaming Pattern Recognition Map

### Streaming Feature Patterns
- **Browse Pattern**: Featured ‚Üí Categories ‚Üí Personalized Rows ‚Üí Continue Watching
- **Player Pattern**: Video ‚Üí Controls ‚Üí Quality Options ‚Üí Related Content
- **Content Detail Pattern**: Preview ‚Üí Info ‚Üí Cast ‚Üí Similar Titles
- **User Profile Pattern**: Preferences ‚Üí History ‚Üí Watchlist ‚Üí Recommendations
- **Search Pattern**: Query ‚Üí Filters ‚Üí Results Grid ‚Üí Quick Preview
- **Category Pattern**: Banner ‚Üí Description ‚Üí Subcategories ‚Üí Content Grid
```

### Landing Page Generator
```javascript
function generateLandingPageRules() {
  return `
## üó∫Ô∏è Landing Page Architecture Map

\`\`\`
‚îå‚îÄ User Interface Layer ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îå‚îÄ Conversion Layer ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                     ‚îÇ      ‚îÇ                           ‚îÇ
‚îÇ  ‚îå‚îÄ Page Sections ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îÇ      ‚îÇ  ‚îå‚îÄ Form Processing ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Hero Section             ‚îÇ    ‚îÇ      ‚îÇ  ‚îÇ - Lead Capture       ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Features/Benefits        ‚îÇ    ‚îÇ      ‚îÇ  ‚îÇ - Form Validation    ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Social Proof             ‚îÇ    ‚îÇ      ‚îÇ  ‚îÇ - Submission Handling‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - CTA Sections             ‚îÇ    ‚îÇ      ‚îÇ  ‚îÇ - Thank You/Next Steps‚îÇ ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îÇ      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ                                     ‚îÇ      ‚îÇ                           ‚îÇ
‚îÇ  ‚îå‚îÄ Client Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ      ‚îÇ  ‚îå‚îÄ Data Storage ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Animated Elements          ‚îÇ‚óÑ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚ñ∫‚îÇ - Lead Information    ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Form Components            ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Analytics Data      ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Testimonial Sliders        ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - A/B Test Variations ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Mobile Responsiveness      ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Campaign Metrics    ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ                                     ‚îÇ      ‚îÇ                           ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ Landing Page Specific Concerns ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                                                          ‚îÇ
‚îÇ  ‚îå‚îÄ Conversion Optimization ‚îê  ‚îå‚îÄ Messaging Strategy ‚îê  ‚îå‚îÄ Analytics ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ  ‚îÇ - Value Proposition     ‚îÇ  ‚îÇ - Copy Hierarchy    ‚îÇ  ‚îÇ - Conversion   ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - CTA Design            ‚îÇ  ‚îÇ - Pain Points       ‚îÇ  ‚îÇ   Tracking     ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Form Optimization     ‚îÇ  ‚îÇ - Benefits          ‚îÇ  ‚îÇ - Heatmaps     ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - A/B Testing           ‚îÇ  ‚îÇ - Social Proof      ‚îÇ  ‚îÇ - User Journey ‚îÇ ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îÇ                                                                          ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
\`\`\`

## üìã Landing Page Implementation Plan

### Phase 1: Landing Page Setup
[ ] 1.1. Initial Setup
    [ ] Create Next.js project with TypeScript
    [ ] Configure ESLint and Prettier
    [ ] Set up project structure for landing page
    [ ] Initialize Git repository

[ ] 1.2. Landing Page Dependencies
    [ ] Install Shadcn UI for landing page components
    [ ] Set up animation libraries (Framer Motion)
    [ ] Install landing page specific dependencies
        [ ] Add form handling and validation
        [ ] Add analytics tracking
        [ ] Add A/B testing tools if needed

[ ] 1.3. Design Implementation
    [ ] Create responsive layout structure
    [ ] Implement brand colors and typography
    [ ] Set up image optimization
    [ ] Create reusable UI components

### Phase 2: Core Landing Page Sections
[ ] 2.1. Hero Section
    [ ] Headline and subheadline
    [ ] Primary CTA
    [ ] Visual element (image/video)
    [ ] Social proof indicators

[ ] 2.2. Value Proposition Sections
    [ ] Features/benefits presentation
    [ ] Problem/solution framing
    [ ] Visual aids and illustrations
    [ ] Secondary CTAs

[ ] 2.3. Social Proof
    [ ] Testimonial components
    [ ] Client logos section
    [ ] Case study highlights
    [ ] Trust indicators

### Phase 3: Conversion Elements
[ ] 3.1. Lead Capture
    [ ] Form design and implementation
    [ ] Form validation
    [ ] Submission handling
    [ ] Thank you/confirmation state

[ ] 3.2. Supporting Elements
    [ ] FAQ section
    [ ] Pricing information (if applicable)
    [ ] Guarantee statements
    [ ] Final CTA section

### Phase 4: Optimization
[ ] 4.1. Performance
    [ ] Image optimization
    [ ] Core Web Vitals improvement
    [ ] Mobile responsiveness testing
    [ ] Page load optimization

[ ] 4.2. Analytics
    [ ] Conversion tracking setup
    [ ] Event tracking implementation
    [ ] A/B testing framework
    [ ] User behavior monitoring

## üß† Landing Page Pattern Recognition Map

### Landing Page Feature Patterns
- **Hero Pattern**: Headline ‚Üí Subheadline ‚Üí Primary CTA ‚Üí Visual Element
- **Feature Pattern**: Problem Statement ‚Üí Solution ‚Üí Benefit ‚Üí Visual
- **Testimonial Pattern**: Quote ‚Üí Client Name ‚Üí Position/Company ‚Üí Photo
- **CTA Pattern**: Value Proposition ‚Üí Action Button ‚Üí Risk Reducer
- **Form Pattern**: Minimal Fields ‚Üí Clear Labels ‚Üí Submit Button ‚Üí Next Steps
- **FAQ Pattern**: Common Objections ‚Üí Clear Answers ‚Üí Supporting Evidence ‚Üí CTA
```

### Web Application/SaaS Platform Generator
```javascript
function generateWebAppRules() {
  return `
## üó∫Ô∏è Web Application/SaaS Architecture Map

\`\`\`
‚îå‚îÄ User Interface Layer ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê      ‚îå‚îÄ Backend Layer ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                     ‚îÇ      ‚îÇ                            ‚îÇ
‚îÇ  ‚îå‚îÄ Page Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê   ‚îÇ      ‚îÇ  ‚îå‚îÄ API Routes ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Dashboard                  ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - CRUD Operations     ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Account/Settings           ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Authentication      ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Feature Pages              ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Data Processing     ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Analytics Views            ‚îÇ   ‚îÇ      ‚îÇ  ‚îÇ - Integration Points  ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò   ‚îÇ      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ                                     ‚îÇ      ‚îÇ                            ‚îÇ
‚îÇ  ‚îå‚îÄ Client Components ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ      ‚îÇ  ‚îå‚îÄ Data Layer ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îÇ
‚îÇ  ‚îÇ - Data Visualization         ‚îÇ‚óÑ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚ñ∫‚îÇ - Database Schema      ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Interactive Controls       ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Data Relationships   ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Form Systems               ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Caching Strategy     ‚îÇ  ‚îÇ
‚îÇ  ‚îÇ - Real-time Updates          ‚îÇ  ‚îÇ      ‚îÇ  ‚îÇ - Data Validation      ‚îÇ  ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ      ‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îÇ
‚îÇ                                     ‚îÇ      ‚îÇ                            ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò      ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

‚îå‚îÄ SaaS Specific Concerns ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                                                                        ‚îÇ
‚îÇ  ‚îå‚îÄ Business Logic ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ User Management ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ Operations ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ  ‚îÇ - Subscription Tiers ‚îÇ  ‚îÇ - Authentication    ‚îÇ  ‚îÇ - Monitoring   ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Feature Access     ‚îÇ  ‚îÇ - Role Management   ‚îÇ  ‚îÇ - Logging      ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Usage Tracking     ‚îÇ  ‚îÇ - Team Collaboration‚îÇ  ‚îÇ - Security     ‚îÇ ‚îÇ
‚îÇ  ‚îÇ - Billing System     ‚îÇ  ‚îÇ - User Settings     ‚îÇ  ‚îÇ - Scalability  ‚îÇ ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îÇ                                                                        ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
\`\`\`

## üìã Web Application/SaaS Implementation Plan

### Phase 1: Application Setup
[ ] 1.1. Initial Setup
    [ ] Create Next.js project with TypeScript
    [ ] Configure ESLint and Prettier
    [ ] Set up project structure for SaaS
    [ ] Initialize Git repository

[ ] 1.2. SaaS Dependencies
    [ ] Install Shadcn UI for application components
    [ ] Set up authentication system
    [ ] Install application specific dependencies
        [ ] Add state management library
        [ ] Add data fetching utilities
        [ ] Add real-time functionality

[ ] 1.3. Data Architecture
    [ ] Design database schema
    [ ] Create API structure
    [ ] Set up authentication flow
    [ ] Define data validation rules

### Phase 2: Core Application Features
[ ] 2.1. Authentication System
    [ ] User registration and login
    [ ] Password reset flow
    [ ] Social authentication
    [ ] Session management

[ ] 2.2. User Dashboard
    [ ] Main dashboard layout
    [ ] Key metrics display
    [ ] Activity feed
    [ ] Quick actions

[ ] 2.3. Account Management
    [ ] User profile settings
    [ ] Team management
    [ ] Subscription management
    [ ] Billing integration

### Phase 3: Business Features
[ ] 3.1. Subscription System
    [ ] Plan configuration
    [ ] Payment processing
    [ ] Usage tracking
    [ ] Feature access control

[ ] 3.2. Team Collaboration
    [ ] Role-based access control
    [ ] Team workspace
    [ ] Sharing capabilities
    [ ] Activity logging

### Phase 4: Advanced Features
[ ] 4.1. Integration Framework
    [ ] API documentation
    [ ] Webhook system
    [ ] Third-party integrations
    [ ] Export capabilities

[ ] 4.2. Analytics and Reporting
    [ ] Usage analytics
    [ ] Custom reports
    [ ] Data visualization
    [ ] Export functionality

## üß† Web Application/SaaS Pattern Recognition Map

### SaaS Feature Patterns
- **Dashboard Pattern**: Key Metrics ‚Üí Recent Activity ‚Üí Quick Actions ‚Üí Notifications
- **Settings Pattern**: User Profile ‚Üí Preferences ‚Üí Security ‚Üí Integrations
- **Team Pattern**: Members ‚Üí Roles ‚Üí Permissions ‚Üí Activity
- **Subscription Pattern**: Plans ‚Üí Features ‚Üí Usage ‚Üí Billing
- **Integration Pattern**: API Keys ‚Üí Webhooks ‚Üí OAuth ‚Üí Documentation
- **Analytics Pattern**: Metrics ‚Üí Graphs ‚Üí Filters ‚Üí Export

### SaaS Implementation Standards

#### Security Requirements
- Authentication with MFA support
- Role-based access control (RBAC)
- API rate limiting
- Data encryption at rest and in transit
- Regular security audits
- GDPR/CCPA compliance features

#### Performance Standards
- Page load time < 2s
- API response time < 200ms
- Real-time updates < 100ms
- 99.9% uptime SLA
- Horizontal scaling capability
- CDN integration

#### Monitoring Requirements
- Error tracking and logging
- User activity monitoring
- Performance metrics
- Usage analytics
- Health checks
- Automated alerts

#### Data Management
- Regular backups
- Data retention policies
- Audit trails
- Data export capabilities
- Version control
- Change history

This completes the Web Application/SaaS Platform Generator template with comprehensive guidelines for building robust, scalable SaaS applications.
`;
}